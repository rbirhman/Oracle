/*
# Higher Than 75 Marks
Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
## Input Format
+--------+---------+
| Column | Type    |
+--------+---------+
| ID     | Integer |
| Name   | String  |
| Marks  | Integer |
+--------+---------+
*/

select name from students where marks > 75
order by substring(name,-3) , id


#Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
select name from employee order by name

#Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  
per month who have been employees for less than  months. Sort your result by ascending employee_id.

select name from employee where salary/months >2000 and months < 10


/*
Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeroes removed), and the actual average salary.

Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.
*/
select round(Avg(salary)-avg(replace(salary,0,'')))+1 from employees



/*
Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of 2 decimal places.
The sum of all values in LONG_W rounded to a scale of  2 decimal places.
*/


/*Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than . 
Round your answer to  decimal places.
*/
select
ROUND(long_w,4)  
from station
where 
lat_n<137.2345

Query the smallest Northern Latitude (LAT_N) from STATION that is greater than . Round your answer to decimal places.
select
round(min(lat_n),4)  
from station
where 
lat_n>38.7780


Query the Western Longitude (LONG_W) for the smallest Northern Latitude (LAT_N) in STATION that is greater than . 
Round your answer to  decimal places.


Consider  and  to be two points on a 2D plane.

 happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
 happens to equal the minimum value in Western Longitude (LONG_W in STATION).
 happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
 happens to equal the maximum value in Western Longitude (LONG_W in STATION).


order by lat_n desc limit 1

select round(sum(lat_n),2),round(sum(long_w),2) from station

Query the Manhattan Distance between points  and  and round it to a scale of  decimal places.
select round((abs(min(lat_n)-max(lat_n))+abs(min(long_w)-max(long_w))),4) from station


#Consider  and  to be two points on a 2D plane where  are the respective minimum and maximum values of Northern Latitude (LAT_N) and  are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.

Query the Euclidean Distance between points  and  and format your answer to display  decimal digits.
select round(sqrt(power((min(lat_n)-max(lat_n)),2)+power((min(long_w)-max(long_w)),2)),4) from station


A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.
select ROUND(avg(t1.lat_n),4) as median 
from 
(select @counter:=@counter + 1 as 'Row_No', lat_n from station, (select @counter:=0) r order by 2) as t1
join
(select count(*) as totalRows from station ) as t2
where 
t1.Row_no in (floor((t2.totalRows+1)/2), floor((t2.totalRows+2)/2))



Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.
select sum(CITY.population) from city , country where CITY.CountryCode=COUNTRY.Code and continent='Asia'

Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.
select (CITY.name) from city , country where CITY.CountryCode=COUNTRY.Code and continent='Africa'


/*Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns. Do not include continents without cities in your output.

select (COUNTRY.Continent), floor(avg(CITY.Population)) from city , country where CITY.CountryCode=COUNTRY.Code 
group by COUNTRY.Continent



#Marks
select  (Case  when g.grade >= 8 then s.name else null end), g.grade , s.marks from students s, grades g
where s.marks>=g.min_mark and s.marks<=g.max_mark
order by g.grade desc, s.name, s.marks



Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! 
Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. 
Order your output in descending order by the total number of challenges in which the hacker earned a full score. 

select h.hacker_id , h.name  from hackers h, Challenges c, Difficulty d, Submissions s
where h.hacker_id=s.hacker_id
and c.difficulty_level=d.difficulty_level
and s.score=d.score
and c.challenge_id=s.challenge_id
GROUP BY h.hacker_id , h.name
having count(h.hacker_id)>1
order by count(s.challenge_id) desc, s.hacker_id asc


Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, 
and the total number of challenges created by each student. Sort your results by the total number of challenges in descending order. 
If more than one student created the same number of challenges, then sort the result by hacker_id. 
If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, 
then exclude those students from the result.

Challenges: The challenge_id is the id of the challenge, and hacker_id is the id of the student who created the challenge.
Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker.


select c.hacker_id, h.name ,count(c.hacker_id) as c_count
from Hackers as h inner join Challenges as c on c.hacker_id = h.hacker_id
group by c.hacker_id, h.name
having c_count = (SELECT MAX(temp1.cnt)
        from (SELECT COUNT(hacker_id) as cnt from Challenges group by hacker_id
             order by hacker_id) temp1)
    or c_count in 
        (select t.cnt
         from (select count(*) as cnt 
               from challenges
               group by hacker_id) t
         group by t.cnt
         having count(t.cnt) = 1)
order by c_count DESC, c.hacker_id
If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.
